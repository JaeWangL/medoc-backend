# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthTokensDto {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

type AuthUserDto {
  """JWT access token"""
  accessToken: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!

  """JWT refresh token"""
  refreshToken: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userName: String!
}

input CreateDoctorInput {
  name: String!
  profileUrl: String!
  userId: Int!
}

input CreateReviewInput {
  doctorId: Int!
  message: String!
  name: String!
  profileUrl: String!
  rating: Int!
  userId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DoctorDetailDto {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  name: String!
  profileUrl: String!
  rating: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: Int!
}

type DoctorPreviewCursorPage {
  edges: [DoctorPreviewDtoEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type DoctorPreviewDto {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  name: String!
  profileUrl: String!
  rating: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: Int!
}

type DoctorPreviewDtoEdge {
  cursor: String!
  node: DoctorPreviewDto!
}

type DoctorPreviewOffsetPage {
  count: Int!
  data: [DoctorPreviewDto!]!
  pageIndex: Int!
  pageSize: Int!
}

input FindUserInput {
  id: Int!
}

type Mutation {
  createDoctor(input: CreateDoctorInput!): DoctorDetailDto!
  createReview(input: CreateReviewInput!): ReviewDto!
  refreshToken(data: RefreshTokenInput!): AuthTokensDto!
  signIn(data: SignInInput!): AuthUserDto!
  signUp(data: SignUpInput!): Boolean!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  findDoctorsCursor(after: String, before: String, first: Int, last: Int): DoctorPreviewCursorPage!
  findDoctorsOffset(pageIndex: Int = 1, pageSize: Int = 10): DoctorPreviewOffsetPage!
  findUser(args: FindUserInput!): UserDetailDto!
  getReviewsCursorByDoctorId(after: String, before: String, doctorId: Int!, first: Int, last: Int): ReviewCursorPage!
  getReviewsOffsetByDoctorId(doctorId: Int!, pageIndex: Int = 1, pageSize: Int = 10): ReviewOffsetPage!
  hello(name: String!): String!
  helloWorld: String!
}

input RefreshTokenInput {
  """JWT refresh token"""
  refreshToken: String!
}

type ReviewCursorPage {
  edges: [ReviewDtoEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type ReviewDto {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  message: String!
  name: String!
  profileUrl: String!
  rating: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: Int!
}

type ReviewDtoEdge {
  cursor: String!
  node: ReviewDto!
}

type ReviewOffsetPage {
  count: Int!
  data: [ReviewDto!]!
  pageIndex: Int!
  pageSize: Int!
}

enum Roles {
  Admin
  Manager
  User
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  userName: String!
}

type UserDetailDto {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!
  role: Roles!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userName: String!
}
